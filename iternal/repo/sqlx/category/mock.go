// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Вадим\Desktop\go-store\product\iternal\repo\sqlx\category\category.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\Вадим\Desktop\go-store\product\iternal\repo\sqlx\category\category.go -destination=C:\Users\Вадим\Desktop\go-store\product\iternal\repo\sqlx\category\mock.go -package=repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepo is a mock of CategoryRepo interface.
type MockCategoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepoMockRecorder
	isgomock struct{}
}

// MockCategoryRepoMockRecorder is the mock recorder for MockCategoryRepo.
type MockCategoryRepoMockRecorder struct {
	mock *MockCategoryRepo
}

// NewMockCategoryRepo creates a new mock instance.
func NewMockCategoryRepo(ctrl *gomock.Controller) *MockCategoryRepo {
	mock := &MockCategoryRepo{ctrl: ctrl}
	mock.recorder = &MockCategoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepo) EXPECT() *MockCategoryRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryRepo) Create(ctx context.Context, category Category) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, category)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryRepoMockRecorder) Create(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepo)(nil).Create), ctx, category)
}

// Delete mocks base method.
func (m *MockCategoryRepo) Delete(ctx context.Context, id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryRepo)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockCategoryRepo) GetById(ctx context.Context, id uint32) (Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCategoryRepoMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCategoryRepo)(nil).GetById), ctx, id)
}

// List mocks base method.
func (m *MockCategoryRepo) List(ctx context.Context) ([]Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoryRepoMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategoryRepo)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockCategoryRepo) Update(ctx context.Context, category Category) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, category)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryRepoMockRecorder) Update(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryRepo)(nil).Update), ctx, category)
}
